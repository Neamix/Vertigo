
extend type Mutation {
    uploadAvatar(file: Upload!): User @guard
    uploadCover (file: Upload!): User @guard
    deleteUser(
        input: UserDeleteSuspend
    ): UserStatus! @field(resolver:"UserMutation@delete")  @validator  @guard
    toggleUserActivate(id: ID!): UserStatus @field(resolver: "UserMutation@toggleUserActivate") @guard
    addRole(role_id: ID! @rules(apply: ["exists:roles,id"]),user_id: ID! @rules(apply: ["exists:users,id"])): User @field(resolver: "UserMutation@addRoleToUser") @guard
}

extend type Query {
    user(
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find @guard
    
    me: User @auth

    users(
       input: UserSearchInput 
    ): User  @paginate(type: "paginator" defaultCount: 40 builder: "App\\GraphQL\\Queries\\UserQuery@userList") @guard

    userExport(type: String!,search: UserSearchInput): String @field(resolver: "UserQuery@userExport") @guard
}

type User {
    id: ID!
    name: String!
    email: String!
    email_verified_at: DateTime
    avatar: String,
    cover: String,
    active: Int,
    role: Role @belongsTo,
    created_at: DateTime!
    updated_at: DateTime!
    users(input:UserSearchInput): User @paginate(type: "paginator" defaultCount: 40 builder: "App\\GraphQL\\Queries\\UserQuery@userList")
}

type UserStatus {
    status: String,
    users(input:UserSearchInput): User @paginate(type: "paginator" defaultCount: 40 builder: "App\\GraphQL\\Queries\\UserQuery@userList")
}

input UserDeleteSuspend {
    password: String,
    id: ID
}

input UserSearchInput {
    name: String
    role: ID,
    page: Int
}